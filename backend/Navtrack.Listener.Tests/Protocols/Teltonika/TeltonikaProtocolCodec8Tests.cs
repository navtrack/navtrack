using System.Linq;
using Navtrack.Listener.Models;
using Navtrack.Listener.Protocols.Teltonika;
using Xunit;

namespace Navtrack.Listener.Tests.Protocols.Teltonika;

public class TeltonikaProtocolCodec8Tests : BaseProtocolTests<TeltonikaProtocol, TeltonikaMessageHandler>
{
    [Fact]
    public void Codec8_DeviceSendImeiV1_ServerReturnsAcknowledge()
    {
        ProtocolTester.SendHexFromDevice("000F333536333037303432343431303133");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
    }

    [Fact]
    public void Codec8_DeviceSendImeiV2_ServerReturnsAcknowledge()
    {
        ProtocolTester.SendHexFromDevice("000F333532383438303236333839393631");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
    }
        
    [Fact]
    public void Codec8_DeviceSendsLocationV1_ServerConfirmsDataReceived()
    {
        ProtocolTester.SendHexFromDevice("000F333536333037303432343431303133");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
        Assert.NotNull(ProtocolTester.ConnectionContext.Device);

        ProtocolTester.SendHexFromDevice(
            "000000000000003608010000016B40D8EA30010000000000000000000000000000000105021503010101425E0F01F10000601A014E0000000000000000010000C7CF");

        Assert.Equal("00000001", ProtocolTester.ReceiveHexInDevice());
        Assert.Single(ProtocolTester.LastParsedPositions);
    }
        
    [Fact]
    public void Codec8_DeviceSendsLocationV2_ServerConfirmsDataReceived()
    {
        ProtocolTester.SendHexFromDevice("000F333536333037303432343431303133");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
        Assert.NotNull(ProtocolTester.ConnectionContext.Device);

        ProtocolTester.SendHexFromDevice(
            "000000000000002808010000016B40D9AD80010000000000000000000000000000000103021503010101425E100000010000F22A");

        Assert.Equal("00000001", ProtocolTester.ReceiveHexInDevice());
        Assert.Single(ProtocolTester.LastParsedPositions);
    }

    [Fact]
    public void Codec8_DeviceSendsLocationV3_ServerConfirmsDataReceived()
    {
        ProtocolTester.SendHexFromDevice("000F333536333037303432343431303133");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
        Assert.NotNull(ProtocolTester.ConnectionContext.Device);

        ProtocolTester.SendHexFromDevice(
            "000000000000004308020000016B40D57B480100000000000000000000000000000001010101000000000000016B40D5C198010000000000000000000000000000000101010101000000020000252C");

        Assert.Equal("00000002", ProtocolTester.ReceiveHexInDevice());
        Assert.Equal(2, ProtocolTester.LastParsedPositions.Count);
    }
        
    [Fact]
    public void Codec8_DeviceSendsLocationV4_ServerConfirmsDataReceived()
    {
        ProtocolTester.SendHexFromDevice("000F333532383438303236333839393631");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
        Assert.NotNull(ProtocolTester.ConnectionContext.Device);

        ProtocolTester.SendHexFromDevice(


        Assert.Equal("00000012", ProtocolTester.ReceiveHexInDevice());
        Assert.Equal(18, ProtocolTester.LastParsedPositions.Count());
    }
    
    [Fact]
    public void Codec8_DeviceSendsLocationV5_CoordinatesAreCorrect()
    {
        ProtocolTester.SendHexFromDevice("000F333532383438303236333839393631");

        Assert.Equal("01", ProtocolTester.ReceiveHexInDevice());
        Assert.NotNull(ProtocolTester.ConnectionContext.Device);

        ProtocolTester.SendHexFromDevice(


        Position? location = ProtocolTester.LastParsedPositions?[6];
        
        Assert.Equal(23.2759072, location?.Longitude);
        Assert.Equal(46.7976032, location?.Latitude);
    }
}