// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Navtrack.Database.Model;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Navtrack.Database.Model.Migrations
{
    [DbContext(typeof(NavtrackDbContext))]
    partial class NavtrackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Navtrack.Database.Model.Assets.AssetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastPositionMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("LastMessageId")
                        .IsUnique();

                    b.HasIndex("LastPositionMessageId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Assets.AssetUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("AssetId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("assets_users");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Authentication.AuthRefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Lifetime")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("auth_refresh_tokens");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceConnectionDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("devices_connections_data");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceConnectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<short>("Port")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("devices_connections");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProtocolPort")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<short?>("Altitude")
                        .HasColumnType("smallint");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConnectionId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlPoint>("Coordinates")
                        .HasColumnType("point");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("DeviceBatteryCurrent")
                        .HasColumnType("real");

                    b.Property<byte?>("DeviceBatteryLevel")
                        .HasColumnType("smallint");

                    b.Property<float?>("DeviceBatteryVoltage")
                        .HasColumnType("real");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DeviceOdometer")
                        .HasColumnType("integer");

                    b.Property<int?>("GSMCellId")
                        .HasColumnType("integer");

                    b.Property<string>("GSMLocationAreaCode")
                        .HasColumnType("text");

                    b.Property<int?>("GSMLteCellId")
                        .HasColumnType("integer");

                    b.Property<string>("GSMMobileCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("GSMMobileNetworkCode")
                        .HasColumnType("text");

                    b.Property<byte?>("GSMSignalLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("GSMSignalStrength")
                        .HasColumnType("smallint");

                    b.Property<float?>("HDOP")
                        .HasColumnType("real");

                    b.Property<short?>("Heading")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MessagePriority")
                        .HasColumnType("smallint");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<string>("OldMessage")
                        .HasColumnType("text");

                    b.Property<float?>("PDOP")
                        .HasColumnType("real");

                    b.Property<short?>("Satellites")
                        .HasColumnType("smallint");

                    b.Property<short?>("Speed")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Valid")
                        .HasColumnType("boolean");

                    b.Property<float?>("VehicleFuelConsumption")
                        .HasColumnType("real");

                    b.Property<bool?>("VehicleIgnition")
                        .HasColumnType("boolean");

                    b.Property<int?>("VehicleIgnitionDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("VehicleOdometer")
                        .HasColumnType("integer");

                    b.Property<float?>("VehicleVoltage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("DeviceId");

                    b.ToTable("devices_messages");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Organizations.OrganizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AssetsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DevicesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<int>("TeamsCount")
                        .HasColumnType("integer");

                    b.Property<int>("UsersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Organizations.OrganizationUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("OrganizationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("organizations_users");
                });

            modelBuilder.Entity("Navtrack.Database.Model.SystemEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("system_events");
                });

            modelBuilder.Entity("Navtrack.Database.Model.SystemSettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("system_settings");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamAssetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("TeamId", "AssetId");

                    b.HasIndex("AssetId");

                    b.ToTable("teams_assets");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssetsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("UsersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("teams_users");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Users.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OldId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(88)
                        .HasColumnType("character varying(88)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<int>("UnitsType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Users.UserPasswordResetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Invalid")
                        .HasColumnType("boolean");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users_password_resets");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Assets.AssetEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Devices.DeviceEntity", "Device")
                        .WithOne()
                        .HasForeignKey("Navtrack.Database.Model.Assets.AssetEntity", "DeviceId");

                    b.HasOne("Navtrack.Database.Model.Devices.DeviceMessageEntity", "LastMessage")
                        .WithOne()
                        .HasForeignKey("Navtrack.Database.Model.Assets.AssetEntity", "LastMessageId");

                    b.HasOne("Navtrack.Database.Model.Devices.DeviceMessageEntity", "LastPositionMessage")
                        .WithOne()
                        .HasForeignKey("Navtrack.Database.Model.Assets.AssetEntity", "LastPositionMessageId");

                    b.HasOne("Navtrack.Database.Model.Organizations.OrganizationEntity", "Organization")
                        .WithMany("Assets")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("LastMessage");

                    b.Navigation("LastPositionMessage");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Assets.AssetUserEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Assets.AssetEntity", "Asset")
                        .WithMany("AssetUsers")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Users.UserEntity", "User")
                        .WithMany("AssetUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceConnectionDataEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Devices.DeviceConnectionEntity", "Connection")
                        .WithMany("Data")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Assets.AssetEntity", "Asset")
                        .WithMany("Devices")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Organizations.OrganizationEntity", "Organization")
                        .WithMany("Devices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceMessageEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Assets.AssetEntity", "Asset")
                        .WithMany("Messages")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Devices.DeviceConnectionEntity", "Connection")
                        .WithMany("Messages")
                        .HasForeignKey("ConnectionId");

                    b.HasOne("Navtrack.Database.Model.Devices.DeviceEntity", "Device")
                        .WithMany("Messages")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Connection");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Organizations.OrganizationUserEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Organizations.OrganizationEntity", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Users.UserEntity", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamAssetEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Assets.AssetEntity", "Asset")
                        .WithMany("TeamAssets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Teams.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Organizations.OrganizationEntity", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Teams.TeamUserEntity", b =>
                {
                    b.HasOne("Navtrack.Database.Model.Teams.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navtrack.Database.Model.Users.UserEntity", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Assets.AssetEntity", b =>
                {
                    b.Navigation("AssetUsers");

                    b.Navigation("Devices");

                    b.Navigation("Messages");

                    b.Navigation("TeamAssets");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceConnectionEntity", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Devices.DeviceEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Organizations.OrganizationEntity", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Devices");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Navtrack.Database.Model.Users.UserEntity", b =>
                {
                    b.Navigation("AssetUsers");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("TeamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
