/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * Navtrack.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query";
import type {
  AssetModel,
  AssetsPositionsGetListParams,
  AssetsReportsGetTimeDistanceReportParams,
  AssetsTripsGetListParams,
  ChangePasswordModel,
  CreateAssetModel,
  CreateAssetUserModel,
  CreateOrUpdateAssetDeviceModel,
  DistanceReportListModel,
  ErrorModel,
  ForgotPasswordModel,
  ListModelOfAssetModel,
  ListModelOfAssetUserModel,
  ListModelOfDeviceModel,
  ListModelOfDeviceTypeModel,
  ListModelOfProtocolModel,
  PositionListModel,
  ProblemDetails,
  RegisterAccountModel,
  ResetPasswordModel,
  TripListModel,
  UpdateAssetModel,
  UpdateUserModel,
  UserModel
} from "./model/generated";
import { authAxiosInstance } from "./authAxiosInstance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const accountRegister = (registerAccountModel: RegisterAccountModel) => {
  return authAxiosInstance<void>({
    url: `/account`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerAccountModel
  });
};

export const getAccountRegisterMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountRegister>>,
    TError,
    { data: RegisterAccountModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountRegister>>,
  TError,
  { data: RegisterAccountModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountRegister>>,
    { data: RegisterAccountModel }
  > = (props) => {
    const { data } = props ?? {};

    return accountRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountRegister>>
>;
export type AccountRegisterMutationBody = RegisterAccountModel;
export type AccountRegisterMutationError = ErrorModel;

export const useAccountRegister = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountRegister>>,
    TError,
    { data: RegisterAccountModel },
    TContext
  >;
}) => {
  const mutationOptions = getAccountRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const accountForgotPassword = (
  forgotPasswordModel: ForgotPasswordModel
) => {
  return authAxiosInstance<void>({
    url: `/account/password/forgot`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: forgotPasswordModel
  });
};

export const getAccountForgotPasswordMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountForgotPassword>>,
    TError,
    { data: ForgotPasswordModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountForgotPassword>>,
  TError,
  { data: ForgotPasswordModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountForgotPassword>>,
    { data: ForgotPasswordModel }
  > = (props) => {
    const { data } = props ?? {};

    return accountForgotPassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountForgotPassword>>
>;
export type AccountForgotPasswordMutationBody = ForgotPasswordModel;
export type AccountForgotPasswordMutationError = ErrorModel;

export const useAccountForgotPassword = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountForgotPassword>>,
    TError,
    { data: ForgotPasswordModel },
    TContext
  >;
}) => {
  const mutationOptions = getAccountForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const accountResetPassword = (
  resetPasswordModel: ResetPasswordModel
) => {
  return authAxiosInstance<void>({
    url: `/account/password/reset`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resetPasswordModel
  });
};

export const getAccountResetPasswordMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountResetPassword>>,
    TError,
    { data: ResetPasswordModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountResetPassword>>,
  TError,
  { data: ResetPasswordModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountResetPassword>>,
    { data: ResetPasswordModel }
  > = (props) => {
    const { data } = props ?? {};

    return accountResetPassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountResetPassword>>
>;
export type AccountResetPasswordMutationBody = ResetPasswordModel;
export type AccountResetPasswordMutationError = ErrorModel;

export const useAccountResetPassword = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountResetPassword>>,
    TError,
    { data: ResetPasswordModel },
    TContext
  >;
}) => {
  const mutationOptions = getAccountResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const accountChangePassword = (
  changePasswordModel: ChangePasswordModel
) => {
  return authAxiosInstance<void>({
    url: `/account/password/change`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: changePasswordModel
  });
};

export const getAccountChangePasswordMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountChangePassword>>,
    TError,
    { data: ChangePasswordModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountChangePassword>>,
  TError,
  { data: ChangePasswordModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountChangePassword>>,
    { data: ChangePasswordModel }
  > = (props) => {
    const { data } = props ?? {};

    return accountChangePassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountChangePassword>>
>;
export type AccountChangePasswordMutationBody = ChangePasswordModel;
export type AccountChangePasswordMutationError = ErrorModel;

export const useAccountChangePassword = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountChangePassword>>,
    TError,
    { data: ChangePasswordModel },
    TContext
  >;
}) => {
  const mutationOptions = getAccountChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsGetList = (signal?: AbortSignal) => {
  return authAxiosInstance<ListModelOfAssetModel>({
    url: `/assets`,
    method: "GET",
    signal
  });
};

export const getAssetsGetListQueryKey = () => {
  return [`/assets`] as const;
};

export const getAssetsGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof assetsGetList>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAssetsGetListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsGetList>>> = ({
    signal
  }) => assetsGetList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsGetList>>
>;
export type AssetsGetListQueryError = unknown;

export const useAssetsGetList = <
  TData = Awaited<ReturnType<typeof assetsGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof assetsGetList>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsGetListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsCreate = (createAssetModel: CreateAssetModel) => {
  return authAxiosInstance<AssetModel>({
    url: `/assets`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createAssetModel
  });
};

export const getAssetsCreateMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsCreate>>,
    TError,
    { data: CreateAssetModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsCreate>>,
  TError,
  { data: CreateAssetModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsCreate>>,
    { data: CreateAssetModel }
  > = (props) => {
    const { data } = props ?? {};

    return assetsCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsCreate>>
>;
export type AssetsCreateMutationBody = CreateAssetModel;
export type AssetsCreateMutationError = ErrorModel;

export const useAssetsCreate = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsCreate>>,
    TError,
    { data: CreateAssetModel },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsGet = (assetId: string, signal?: AbortSignal) => {
  return authAxiosInstance<AssetModel>({
    url: `/assets/${assetId}`,
    method: "GET",
    signal
  });
};

export const getAssetsGetQueryKey = (assetId: string) => {
  return [`/assets/${assetId}`] as const;
};

export const getAssetsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsGet>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAssetsGetQueryKey(assetId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsGet>>> = ({
    signal
  }) => assetsGet(assetId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof assetsGet>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type AssetsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsGet>>
>;
export type AssetsGetQueryError = ProblemDetails;

export const useAssetsGet = <
  TData = Awaited<ReturnType<typeof assetsGet>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsGetQueryOptions(assetId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsUpdate = (
  assetId: string,
  updateAssetModel: UpdateAssetModel
) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: updateAssetModel
  });
};

export const getAssetsUpdateMutationOptions = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUpdate>>,
    TError,
    { assetId: string; data: UpdateAssetModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsUpdate>>,
  TError,
  { assetId: string; data: UpdateAssetModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsUpdate>>,
    { assetId: string; data: UpdateAssetModel }
  > = (props) => {
    const { assetId, data } = props ?? {};

    return assetsUpdate(assetId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsUpdate>>
>;
export type AssetsUpdateMutationBody = UpdateAssetModel;
export type AssetsUpdateMutationError = ErrorModel | ProblemDetails;

export const useAssetsUpdate = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUpdate>>,
    TError,
    { assetId: string; data: UpdateAssetModel },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsDelete = (assetId: string) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}`,
    method: "DELETE"
  });
};

export const getAssetsDeleteMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDelete>>,
    TError,
    { assetId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsDelete>>,
  TError,
  { assetId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsDelete>>,
    { assetId: string }
  > = (props) => {
    const { assetId } = props ?? {};

    return assetsDelete(assetId);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsDelete>>
>;

export type AssetsDeleteMutationError = ProblemDetails;

export const useAssetsDelete = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDelete>>,
    TError,
    { assetId: string },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsDevicesGetList = (assetId: string, signal?: AbortSignal) => {
  return authAxiosInstance<ListModelOfDeviceModel>({
    url: `/assets/${assetId}/devices`,
    method: "GET",
    signal
  });
};

export const getAssetsDevicesGetListQueryKey = (assetId: string) => {
  return [`/assets/${assetId}/devices`] as const;
};

export const getAssetsDevicesGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsDevicesGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsDevicesGetList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsDevicesGetListQueryKey(assetId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsDevicesGetList>>
  > = ({ signal }) => assetsDevicesGetList(assetId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsDevicesGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsDevicesGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsDevicesGetList>>
>;
export type AssetsDevicesGetListQueryError = ProblemDetails;

export const useAssetsDevicesGetList = <
  TData = Awaited<ReturnType<typeof assetsDevicesGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsDevicesGetList>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsDevicesGetListQueryOptions(assetId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsDevicesCreateOrUpdate = (
  assetId: string,
  createOrUpdateAssetDeviceModel: CreateOrUpdateAssetDeviceModel
) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}/devices`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createOrUpdateAssetDeviceModel
  });
};

export const getAssetsDevicesCreateOrUpdateMutationOptions = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDevicesCreateOrUpdate>>,
    TError,
    { assetId: string; data: CreateOrUpdateAssetDeviceModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsDevicesCreateOrUpdate>>,
  TError,
  { assetId: string; data: CreateOrUpdateAssetDeviceModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsDevicesCreateOrUpdate>>,
    { assetId: string; data: CreateOrUpdateAssetDeviceModel }
  > = (props) => {
    const { assetId, data } = props ?? {};

    return assetsDevicesCreateOrUpdate(assetId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsDevicesCreateOrUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsDevicesCreateOrUpdate>>
>;
export type AssetsDevicesCreateOrUpdateMutationBody =
  CreateOrUpdateAssetDeviceModel;
export type AssetsDevicesCreateOrUpdateMutationError =
  | ErrorModel
  | ProblemDetails;

export const useAssetsDevicesCreateOrUpdate = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDevicesCreateOrUpdate>>,
    TError,
    { assetId: string; data: CreateOrUpdateAssetDeviceModel },
    TContext
  >;
}) => {
  const mutationOptions =
    getAssetsDevicesCreateOrUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsDevicesDelete = (assetId: string, deviceId: string) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}/devices/${deviceId}`,
    method: "DELETE"
  });
};

export const getAssetsDevicesDeleteMutationOptions = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDevicesDelete>>,
    TError,
    { assetId: string; deviceId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsDevicesDelete>>,
  TError,
  { assetId: string; deviceId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsDevicesDelete>>,
    { assetId: string; deviceId: string }
  > = (props) => {
    const { assetId, deviceId } = props ?? {};

    return assetsDevicesDelete(assetId, deviceId);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsDevicesDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsDevicesDelete>>
>;

export type AssetsDevicesDeleteMutationError = ErrorModel | ProblemDetails;

export const useAssetsDevicesDelete = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDevicesDelete>>,
    TError,
    { assetId: string; deviceId: string },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsDevicesDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsPositionsGetList = (
  assetId: string,
  params?: AssetsPositionsGetListParams,
  signal?: AbortSignal
) => {
  return authAxiosInstance<PositionListModel>({
    url: `/assets/${assetId}/positions`,
    method: "GET",
    params,
    signal
  });
};

export const getAssetsPositionsGetListQueryKey = (
  assetId: string,
  params?: AssetsPositionsGetListParams
) => {
  return [`/assets/${assetId}/positions`, ...(params ? [params] : [])] as const;
};

export const getAssetsPositionsGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsPositionsGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsPositionsGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsPositionsGetList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsPositionsGetListQueryKey(assetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsPositionsGetList>>
  > = ({ signal }) => assetsPositionsGetList(assetId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsPositionsGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsPositionsGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsPositionsGetList>>
>;
export type AssetsPositionsGetListQueryError = ProblemDetails;

export const useAssetsPositionsGetList = <
  TData = Awaited<ReturnType<typeof assetsPositionsGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsPositionsGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsPositionsGetList>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsPositionsGetListQueryOptions(
    assetId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsReportsGetTimeDistanceReport = (
  assetId: string,
  params?: AssetsReportsGetTimeDistanceReportParams,
  signal?: AbortSignal
) => {
  return authAxiosInstance<DistanceReportListModel>({
    url: `/assets/${assetId}/reports/time-distance`,
    method: "GET",
    params,
    signal
  });
};

export const getAssetsReportsGetTimeDistanceReportQueryKey = (
  assetId: string,
  params?: AssetsReportsGetTimeDistanceReportParams
) => {
  return [
    `/assets/${assetId}/reports/time-distance`,
    ...(params ? [params] : [])
  ] as const;
};

export const getAssetsReportsGetTimeDistanceReportQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsReportsGetTimeDistanceReportParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAssetsReportsGetTimeDistanceReportQueryKey(assetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>
  > = ({ signal }) =>
    assetsReportsGetTimeDistanceReport(assetId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsReportsGetTimeDistanceReportQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>
>;
export type AssetsReportsGetTimeDistanceReportQueryError = ProblemDetails;

export const useAssetsReportsGetTimeDistanceReport = <
  TData = Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsReportsGetTimeDistanceReportParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsReportsGetTimeDistanceReport>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsReportsGetTimeDistanceReportQueryOptions(
    assetId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsTripsGetList = (
  assetId: string,
  params?: AssetsTripsGetListParams,
  signal?: AbortSignal
) => {
  return authAxiosInstance<TripListModel>({
    url: `/assets/${assetId}/trips`,
    method: "GET",
    params,
    signal
  });
};

export const getAssetsTripsGetListQueryKey = (
  assetId: string,
  params?: AssetsTripsGetListParams
) => {
  return [`/assets/${assetId}/trips`, ...(params ? [params] : [])] as const;
};

export const getAssetsTripsGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsTripsGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsTripsGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsTripsGetList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsTripsGetListQueryKey(assetId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsTripsGetList>>
  > = ({ signal }) => assetsTripsGetList(assetId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsTripsGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsTripsGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsTripsGetList>>
>;
export type AssetsTripsGetListQueryError = ProblemDetails;

export const useAssetsTripsGetList = <
  TData = Awaited<ReturnType<typeof assetsTripsGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  params?: AssetsTripsGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsTripsGetList>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsTripsGetListQueryOptions(
    assetId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsUsersGetList = (assetId: string, signal?: AbortSignal) => {
  return authAxiosInstance<ListModelOfAssetUserModel>({
    url: `/assets/${assetId}/users`,
    method: "GET",
    signal
  });
};

export const getAssetsUsersGetListQueryKey = (assetId: string) => {
  return [`/assets/${assetId}/users`] as const;
};

export const getAssetsUsersGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsUsersGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsUsersGetList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsUsersGetListQueryKey(assetId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsUsersGetList>>
  > = ({ signal }) => assetsUsersGetList(assetId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assetId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsUsersGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsUsersGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsUsersGetList>>
>;
export type AssetsUsersGetListQueryError = ProblemDetails;

export const useAssetsUsersGetList = <
  TData = Awaited<ReturnType<typeof assetsUsersGetList>>,
  TError = ProblemDetails
>(
  assetId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof assetsUsersGetList>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsUsersGetListQueryOptions(assetId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsUsersCreate = (
  assetId: string,
  createAssetUserModel: CreateAssetUserModel
) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}/users`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createAssetUserModel
  });
};

export const getAssetsUsersCreateMutationOptions = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUsersCreate>>,
    TError,
    { assetId: string; data: CreateAssetUserModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsUsersCreate>>,
  TError,
  { assetId: string; data: CreateAssetUserModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsUsersCreate>>,
    { assetId: string; data: CreateAssetUserModel }
  > = (props) => {
    const { assetId, data } = props ?? {};

    return assetsUsersCreate(assetId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsUsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsUsersCreate>>
>;
export type AssetsUsersCreateMutationBody = CreateAssetUserModel;
export type AssetsUsersCreateMutationError = ErrorModel | ProblemDetails;

export const useAssetsUsersCreate = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUsersCreate>>,
    TError,
    { assetId: string; data: CreateAssetUserModel },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsUsersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const assetsUsersDelete = (assetId: string, userId: string) => {
  return authAxiosInstance<void>({
    url: `/assets/${assetId}/users/${userId}`,
    method: "DELETE"
  });
};

export const getAssetsUsersDeleteMutationOptions = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUsersDelete>>,
    TError,
    { assetId: string; userId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsUsersDelete>>,
  TError,
  { assetId: string; userId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsUsersDelete>>,
    { assetId: string; userId: string }
  > = (props) => {
    const { assetId, userId } = props ?? {};

    return assetsUsersDelete(assetId, userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsUsersDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsUsersDelete>>
>;

export type AssetsUsersDeleteMutationError = ErrorModel | ProblemDetails;

export const useAssetsUsersDelete = <
  TError = ErrorModel | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsUsersDelete>>,
    TError,
    { assetId: string; userId: string },
    TContext
  >;
}) => {
  const mutationOptions = getAssetsUsersDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

export const devicesGetList = (signal?: AbortSignal) => {
  return authAxiosInstance<ListModelOfDeviceTypeModel>({
    url: `/devices/types`,
    method: "GET",
    signal
  });
};

export const getDevicesGetListQueryKey = () => {
  return [`/devices/types`] as const;
};

export const getDevicesGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof devicesGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof devicesGetList>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDevicesGetListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof devicesGetList>>> = ({
    signal
  }) => devicesGetList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof devicesGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DevicesGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof devicesGetList>>
>;
export type DevicesGetListQueryError = unknown;

export const useDevicesGetList = <
  TData = Awaited<ReturnType<typeof devicesGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof devicesGetList>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDevicesGetListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const protocolsGetList = (signal?: AbortSignal) => {
  return authAxiosInstance<ListModelOfProtocolModel>({
    url: `/protocols`,
    method: "GET",
    signal
  });
};

export const getProtocolsGetListQueryKey = () => {
  return [`/protocols`] as const;
};

export const getProtocolsGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof protocolsGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof protocolsGetList>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProtocolsGetListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof protocolsGetList>>
  > = ({ signal }) => protocolsGetList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof protocolsGetList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProtocolsGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof protocolsGetList>>
>;
export type ProtocolsGetListQueryError = unknown;

export const useProtocolsGetList = <
  TData = Awaited<ReturnType<typeof protocolsGetList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof protocolsGetList>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProtocolsGetListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const userGet = (signal?: AbortSignal) => {
  return authAxiosInstance<UserModel>({ url: `/user`, method: "GET", signal });
};

export const getUserGetQueryKey = () => {
  return [`/user`] as const;
};

export const getUserGetQueryOptions = <
  TData = Awaited<ReturnType<typeof userGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userGet>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGet>>> = ({
    signal
  }) => userGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UserGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userGet>>
>;
export type UserGetQueryError = unknown;

export const useUserGet = <
  TData = Awaited<ReturnType<typeof userGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userGet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const userUpdate = (updateUserModel: UpdateUserModel) => {
  return authAxiosInstance<void>({
    url: `/user`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: updateUserModel
  });
};

export const getUserUpdateMutationOptions = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userUpdate>>,
    TError,
    { data: UpdateUserModel },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userUpdate>>,
  TError,
  { data: UpdateUserModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userUpdate>>,
    { data: UpdateUserModel }
  > = (props) => {
    const { data } = props ?? {};

    return userUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userUpdate>>
>;
export type UserUpdateMutationBody = UpdateUserModel;
export type UserUpdateMutationError = ErrorModel;

export const useUserUpdate = <
  TError = ErrorModel,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userUpdate>>,
    TError,
    { data: UpdateUserModel },
    TContext
  >;
}) => {
  const mutationOptions = getUserUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const healthGet = (signal?: AbortSignal) => {
  return authAxiosInstance<void>({ url: `/health`, method: "GET", signal });
};

export const getHealthGetQueryKey = () => {
  return [`/health`] as const;
};

export const getHealthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof healthGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof healthGet>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthGet>>> = ({
    signal
  }) => healthGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type HealthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthGet>>
>;
export type HealthGetQueryError = unknown;

export const useHealthGet = <
  TData = Awaited<ReturnType<typeof healthGet>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof healthGet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getHealthGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
